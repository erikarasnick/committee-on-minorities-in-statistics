write.table(pq.table, paste('../Outputs/', GSS_ID, 'pval_qval.csv', sep=''), sep=',', row.names=FALSE, col.names=TRUE)
###################################
library(plyr)
rowSDs = function(x) {
sqrt(rowSums((x - rowMeans(x))^2) / (ncol(x) - 1))
}
rowSds = function(x) {
sqrt(rowSums((x - rowMeans(x))^2) / (ncol(x) - 1))
}
tfc = function(x) {
x = 2^x
x[x<1] = -1 / x[x<1]
x
}
grps = levels(as.factor(decode$TRTN))
names(grps) = levels(as.factor(decode$TRTN))
comps = list(
"High_vs_Low_6hr"        = c("TRTNpTeroPure_High_Dose_6", "TRTNpTeroPure_Low_Dose_6"),
"High_vs_Control_6hr"    = c("TRTNpTeroPure_High_Dose_6", "TRTNVehicle_control_6"),
"Low_vs_Control_6hr"     = c("TRTNpTeroPure_Low_Dose_6", "TRTNVehicle_control_6"),
"High_vs_Low_24hr"       = c("TRTNpTeroPure_High_Dose_24", "TRTNpTeroPure_Low_Dose_24"),
"High_vs_Control_24hr"   = c("TRTNpTeroPure_High_Dose_24", "TRTNVehicle_control_24"),
"Low_vs_Control_24hr"    = c("TRTNpTeroPure_Low_Dose_24", "TRTNVehicle_control_24")
)
grps = lapply(grps, function(x) {
rownames(decode)[decode$TRTN %in% x]
})
means = t(laply(grps, function(x) {
rowMeans(signal[, x])
}))
colnames(means) = paste('MN', names(grps), sep='_TRTN')
ses = t(laply(grps, function(x) {
rowSDs(signal[, x]) / sqrt(length(x))
}))
colnames(ses) = paste('SE', names(grps), sep='_TRTN')
logmeans = t(laply(grps, function(x) {
rowMeans(log2(signal[, x]))
}))
colnames(logmeans) = paste('LMN', names(grps), sep='_TRTN')
logses = t(laply(grps, function(x) {
rowSDs(log2(signal[, x])) / sqrt(length(x))
}))
colnames(logses) = paste('LSE', names(grps), sep='_TRTN')
logfcs = t(laply(comps, function(x) {
x = paste('MN', x, sep='_')
log2(means[, x[1]] / means[, x[2]])
}))
colnames(logfcs) = paste('LFC', names(comps), sep='_')
trufcs = tfc(logfcs)
colnames(trufcs) = gsub('LFC', 'TFC', colnames(trufcs))
## EDIT
GSS_ID = 'GSS2543'
ss = list(sampleCounts=table(decode$TRTN))
ss[[1]]
ss = c(ss, list(grps=grps, comps=comps,
means=means, ses=ses,
logmeans=logmeans, logses=logses,
logfcs=logfcs, trufcs=trufcs))
tmp = data.frame(PROBESET_ID=rownames(signal),
round(ss$means,digits=6), round(ss$ses,digits=6), round(ss$logmeans,digits=6), round(ss$logses,digits=6),
round(ss$logfcs,digits=6), round(ss$trufcs,digits=6), tvalue,pvalue,  data.qvalue[,-1])
names(tmp)[2:25] = gsub("TRTN","",names(tmp)[2:25])
if(file.access("Outputs",mode=0)==-1)
dir.create("Outputs")
write.table(tmp, file='../Outputs/GSS2539_stats_results.tsv', sep='\t', row.names=FALSE, quote=FALSE)
tmp = colDescF(colnames(tmp))
rownames(tmp) = as.character(tmp$COL_NAME)
study="GSS2543"
write.table(tmp, paste('../Outputs/', study, '_stats_results_columns.tsv', sep=''), sep='\t', row.names=FALSE,quote=FALSE)
# Pvalues
library(reshape2)
library(ggplot2)
pvalues.lng <- melt(pvalue, id.vars = c(rownames(pvalues)))
pvalues.lng$varlst = gsub("PVAL_", "",pvalues.lng$Contrasts)
pvalues.lng$varlst = gsub("T0", "0",pvalues.lng$varlst)
hist(pvalues.lng$value)
p <- ggplot(data = pvalues.lng, aes(x = value)) +
geom_histogram(aes(y=..density..),colour="black",fill="white")+
#geom_density(alpha=.2, fill="#FF6666",binwidth=.5) +
#geom_line(data=results,aes(y=X),col="red") +
labs(x="p-value")+
facet_wrap(~varlst, nrow=3) +
theme_bw()
p
path = 'P:/special/Biotech/ErikaRasnick/GSS2544/R files/Script/'
#-------- Calling in Base program which calls libraries needed for analyses -----------#
source(paste(path,'00-initialize.R',sep=""))
#-----------  Setting up Working Directory --------------#
setwd("P:/special/Biotech/ErikaRasnick/GSS2544/Data")
#---------- ChipInfo and Meta Info------------#
GSS_ID = 'GSS2544'
meta = read.xlsx(file = paste0("../Data/",GSS_ID,"_Summary.xlsx"),
sheetIndex = 1,startRow = 1,endRow = 33,header = TRUE)
names(meta)
meta = transform(meta,
GSS     = GSS_ID,
SAMP_ID = as.character(`ChipID`),
TREATMENT =as.character(`Treatment`),
TIME = `TP`,
PLATE = `Plate..`,
SAMP_LAB = paste(`Treatment`,'_',`TP`, '_', str_pad(substring(`ChipID`,9,11),2,side='left',pad=0),sep=""),
SampleId = as.character(`Sample.ID`),
ROW     = as.character(substring(`GTWell`,1,1)),
COL     = as.character(substring(`GTWell`,2,3)),
SCAN_ORD = `GTScanOrder`,
Yield = `cRNAYield.ug.`)
meta = meta[, c('GSS', 'SAMP_ID', 'ROW','COL','SampleId','TREATMENT','TIME','SAMP_LAB','SCAN_ORD','PLATE','Yield', 'IsoOrder', 'LcOrder')]
rownames(meta) = meta$SAMP_ID
meta$QC_PASS = 1
meta$QC_PASS[meta$SAMP_ID %in% c('GSS2544_05')]=0
#-------------  Creating GSSID_meta tab and GSSID_meta_columns tab delimited file --------------#
#--------------   This part needs to be run only after deciding what samples to excluded ---------#
meta.tsv = meta[, c('GSS', 'SAMP_ID', 'SAMP_LAB', 'TREATMENT', 'TIME','QC_PASS')]
meta.new = transform(meta.tsv,
STUDY = GSS,
SAMPLE_ID = SAMP_ID,
TREATMENT = TREATMENT,
TIMEPOINT = TIME,
QC_PASS = QC_PASS
)
meta.new$SKIN_LAYER            = ""
meta.new$ORGANISM         = " "
meta.new$ETHNIC_GROUP     = " "
#meta.new$DOSE             = " "
meta.new$DOSE_UNIT        = " "
#meta.new$TIMEPOINT		  = " hrs"
meta.new$TIMEPOINT_UNIT   = "hrs"
meta.new$TREATMENT_CODE   = " "
meta.new$SEX              = " "
meta.new$AGE_UNIT         = " "
meta.new$CELL_LINE        = " "
meta.new$CELL_TYPE        = " "
meta.new$SAMPLE_TYPE      = " "
meta.new$ORGANISM_PART    = " "
meta.new$DISEASE          = " "
meta.new$BIOPSY_SIZE      = " "
meta.new$BIOPSY_SIZE_UNIT = " "
meta.new$ASSAY_TYPE       = " "
meta.new$MATERIAL_ENTITY  = " "
meta.new$ASSAY_PLATFORM   = " "
meta.new$LIBRARY_SOURCE   = " "
meta.new = meta.new[, c("GSS", "SAMPLE_ID",'TREATMENT','TREATMENT_CODE',"QC_PASS",
"TIMEPOINT" , "TIMEPOINT_UNIT", "DOSE_UNIT","ORGANISM",
"CELL_LINE", "CELL_TYPE","SAMPLE_TYPE","ORGANISM_PART","DISEASE","BIOPSY_SIZE", "BIOPSY_SIZE_UNIT",
"ASSAY_TYPE","MATERIAL_ENTITY", "ASSAY_PLATFORM",  "LIBRARY_SOURCE",  "TECHNOLOGY_TYPE")]
write.table(meta.new, file = paste("../Outputs/", paste(GSS_ID, '_meta.tsv', sep=''), sep = ''),
sep='\t', row.names=FALSE,quote=FALSE)
meta.new$TECHNOLOGY_TYPE  = " "
tmp = colDescF(colnames(meta.tsv))
#rownames(tmp) = as.character(tmp$COL_NAME)
write.table(tmp, file = paste("../Outputs/", paste(GSS_ID, '_meta_columns.tsv', sep=''), sep = ''), sep='\t', row.names=FALSE,quote=FALSE)
data.sig = read.delim(paste0('../Data/',GSS_ID,'_Data.TXT') )
signal=data.sig
rownames(signal) = signal$Probe.Set.ID
names(signal) = gsub(".plier.Signal","",names(signal))
signal = signal[,rownames(meta)]
identical(rownames(meta), colnames(signal))
meta = meta[meta$QC_PASS==1,]
signal = signal[ ,rownames(meta)]
tmp  = data.frame(PROBE.SET.ID=rownames(signal),signal)
write.table(tmp, file = paste("../Outputs/", paste(GSS_ID, '_signal.tsv', sep=''), sep = ''), sep='\t', row.names=FALSE,quote=FALSE)
saveRDS(list(meta=meta,signal=signal), file='../R files/Data/dat0.rds')
path = 'P:/special/Biotech/ErikaRasnick/GSS2544/R files/Script/'
#-------- Calling in Base program which calls libraries needed for analyses -----------#
source(paste(path,'00-initialiZe.R',sep=""))
#-----------  Setting up Working Directory --------------#
setwd("P:/special/Biotech/ErikaRasnick/GSS2544/Data")
#---------- ChipInfo and Meta Info------------#
GSS_ID = 'GSS2544'
options(stringsAsFactors=F)
meta = readRDS('../R files/Data/dat0.rds')
signal = meta$signal
meta = meta$meta
identical(rownames(meta),names(signal))
indata = signal
data.sig.log = as.matrix(log2(indata))
decode = meta
decode$TRT_TIME = paste(decode$TREATMENT,decode$TIME,sep=" ")
decode$TRT_TIME <- gsub('([[:punct:]])|\\s+','_',decode$TRT_TIME)
decode$TRTN = rep(" ", nrow(decode))
decode$TRTN = decode$TRT_TIME
design = model.matrix(~0+TRTN, data=decode)
colnames(design)
check1=match(dimnames(data.sig.log)[[2]],as.character(decode[,2]))-1:32
if(any(check1!=0)) stop("Check1 failed. The chip orders in the QCinfo and Housecontrol worksheets do not match up.") else print("check1 OK")
View(design)
check1=match(dimnames(data.sig.log)[[2]],as.character(decode[,2]))-1:31
if(any(check1!=0)) stop("Check1 failed. The chip orders in the QCinfo and Housecontrol worksheets do not match up.") else print("check1 OK")
# Fit probeset-level models
fit = lmFit(data.sig.log, design=design)
# Generate contrasts of interest
trasts = makeContrasts(
High_vs_Low_6hr        = TRTNpTeroPure_High_Dose_6 - TRTNpTeroPure_Low_Dose_6,
High_vs_Control_6hr    = TRTNpTeroPure_High_Dose_6 - TRTNVehicle_control_6,
Low_vs_Control_6hr     = TRTNpTeroPure_Low_Dose_6 - TRTNVehicle_control_6,
High_vs_Low_24hr       = TRTNpTeroPure_High_Dose_24 - TRTNpTeroPure_Low_Dose_24,
High_vs_Control_24hr   = TRTNpTeroPure_High_Dose_24 - TRTNVehicle_control_24,
Low_vs_Control_24hr    = TRTNpTeroPure_Low_Dose_24 - TRTNVehicle_control_24,
levels=design
)
fit2 = contrasts.fit(fit, trasts)
fit2 = eBayes(fit2)
tvalue= fit2$t
dimnames(tvalue)[[2]]=paste("TS_",dimnames(tvalue)[[2]],sep="")
pvalue=fit2$p.value
dimnames(pvalue)[[2]]=paste("PVAL_",dimnames(pvalue)[[2]],sep="")
colSums(pvalue<=0.05)
#q-value
data.qvalue=data.frame(Probe=rownames(signal))
k=2
for (i in 1:6)   {
data.qvalue<- cbind(data.qvalue, q=round(p.adjust(pvalue[,i],method="BH"),6))
names(data.qvalue)[k]=gsub("PVAL","QVAL",dimnames(pvalue)[[2]][i])
k=k+1
}
colSums(data.qvalue[,-1]<=0.1)
pq.table <- data.frame(dimnames(pvalue)[[2]], colSums(pvalue<=0.05),colSums(data.qvalue[,-1]<=0.1))
names(pq.table) <- c("Contrast", "Pval <= 0.05", "Qval <= 0.1")
write.table(pq.table, paste('../Outputs/', GSS_ID, 'pval_qval.csv', sep=''), sep=',', row.names=FALSE, col.names=TRUE)
###################################
library(plyr)
rowSDs = function(x) {
sqrt(rowSums((x - rowMeans(x))^2) / (ncol(x) - 1))
}
rowSds = function(x) {
sqrt(rowSums((x - rowMeans(x))^2) / (ncol(x) - 1))
}
tfc = function(x) {
x = 2^x
x[x<1] = -1 / x[x<1]
x
}
grps = levels(as.factor(decode$TRTN))
names(grps) = levels(as.factor(decode$TRTN))
comps = list(
"High_vs_Low_6hr"        = c("TRTNpTeroPure_High_Dose_6", "TRTNpTeroPure_Low_Dose_6"),
"High_vs_Control_6hr"    = c("TRTNpTeroPure_High_Dose_6", "TRTNVehicle_control_6"),
"Low_vs_Control_6hr"     = c("TRTNpTeroPure_Low_Dose_6", "TRTNVehicle_control_6"),
"High_vs_Low_24hr"       = c("TRTNpTeroPure_High_Dose_24", "TRTNpTeroPure_Low_Dose_24"),
"High_vs_Control_24hr"   = c("TRTNpTeroPure_High_Dose_24", "TRTNVehicle_control_24"),
"Low_vs_Control_24hr"    = c("TRTNpTeroPure_Low_Dose_24", "TRTNVehicle_control_24")
)
grps = lapply(grps, function(x) {
rownames(decode)[decode$TRTN %in% x]
})
means = t(laply(grps, function(x) {
rowMeans(signal[, x])
}))
colnames(means) = paste('MN', names(grps), sep='_TRTN')
ses = t(laply(grps, function(x) {
rowSDs(signal[, x]) / sqrt(length(x))
}))
colnames(ses) = paste('SE', names(grps), sep='_TRTN')
logmeans = t(laply(grps, function(x) {
rowMeans(log2(signal[, x]))
}))
colnames(logmeans) = paste('LMN', names(grps), sep='_TRTN')
logses = t(laply(grps, function(x) {
rowSDs(log2(signal[, x])) / sqrt(length(x))
}))
colnames(logses) = paste('LSE', names(grps), sep='_TRTN')
logfcs = t(laply(comps, function(x) {
x = paste('MN', x, sep='_')
log2(means[, x[1]] / means[, x[2]])
}))
colnames(logfcs) = paste('LFC', names(comps), sep='_')
trufcs = tfc(logfcs)
colnames(trufcs) = gsub('LFC', 'TFC', colnames(trufcs))
## EDIT
GSS_ID = 'GSS2544'
ss = list(sampleCounts=table(decode$TRTN))
ss[[1]]
ss = c(ss, list(grps=grps, comps=comps,
means=means, ses=ses,
logmeans=logmeans, logses=logses,
logfcs=logfcs, trufcs=trufcs))
tmp = data.frame(PROBESET_ID=rownames(signal),
round(ss$means,digits=6), round(ss$ses,digits=6), round(ss$logmeans,digits=6), round(ss$logses,digits=6),
round(ss$logfcs,digits=6), round(ss$trufcs,digits=6), tvalue,pvalue,  data.qvalue[,-1])
names(tmp)[2:25] = gsub("TRTN","",names(tmp)[2:25])
if(file.access("Outputs",mode=0)==-1)
dir.create("Outputs")
write.table(tmp, file='../Outputs/GSS2539_stats_results.tsv', sep='\t', row.names=FALSE, quote=FALSE)
tmp = colDescF(colnames(tmp))
rownames(tmp) = as.character(tmp$COL_NAME)
study="GSS2544"
write.table(tmp, paste('../Outputs/', study, '_stats_results_columns.tsv', sep=''), sep='\t', row.names=FALSE,quote=FALSE)
# Pvalues
library(reshape2)
library(ggplot2)
pvalues.lng <- melt(pvalue, id.vars = c(rownames(pvalues)))
pvalues.lng$varlst = gsub("PVAL_", "",pvalues.lng$Contrasts)
pvalues.lng$varlst = gsub("T0", "0",pvalues.lng$varlst)
hist(pvalues.lng$value)
p <- ggplot(data = pvalues.lng, aes(x = value)) +
geom_histogram(aes(y=..density..),colour="black",fill="white")+
#geom_density(alpha=.2, fill="#FF6666",binwidth=.5) +
#geom_line(data=results,aes(y=X),col="red") +
labs(x="p-value")+
facet_wrap(~varlst, nrow=3) +
theme_bw()
p
install.packages("rmarkdown", type="source")
install.packages("rmarkdown", type = "source")
install.packages("rmarkdown", type = "source")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:\Users\rasnick.e\Documents\cms\committee-on-minorities-in-statistics")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("C:\\Users\\rasnick.e\\Documents\\cms\\committee-on-minorities-in-statistics")
#render your site.
rmarkdown::render_site()
### File:         unpackPkgZip.R
### Date:         23Jan2018
### Author:       Joel Chaney (P&G Quantitative Sciences)
### Description:  This script is used to overwrite the utils:::unpackPkgZip function with a version that pauses briefly when files are copied or directories are created.
###               This pause appears to be necessary in order to avoid "unable to move temporary installation" errors that occur when installing R packages under Windows 10.
###               The issue seems to stem from antivirus real-time file system protection.
###
###               The only difference between this custom "unpackPkgZip" function and the original utils:::unpackPkgZip() function is the addition of a "sleepTime" argument
###               and "Sys.sleep(sleepTime)" calls.
###
###               In order to use this custom function by default every time R is run, save this "unpackPkgZip.R" script to the /etc subdirectory of your R home directory
###               (which you can determine by running "R.home()").  Next, edit the "Rprofile.site" file in /etc by adding the following code to the bottom of the script:
###
###                 .First <- function() {
###                    source(paste0(R.home(), "/etc/unpackPkgZip.R"))
###                 }
###
unpackPkgZip <- function (pkg, pkgname, lib, libs_only = FALSE, lock = FALSE,
quiet = FALSE, sleepTime = 1)
{
.zip.unpack <- function(zipname, dest) {
if (file.exists(zipname)) {
if ((unzip <- getOption("unzip")) != "internal") {
system(paste(shQuote(unzip), "-oq", zipname,
"-d", dest), show.output.on.console = FALSE,
invisible = TRUE)
}
else unzip(zipname, exdir = dest)
}
else stop(gettextf("zip file %s not found", sQuote(zipname)),
domain = NA)
}
lib <- normalizePath(lib, mustWork = TRUE)
tmpDir <- tempfile(, lib)
Sys.sleep(sleepTime)
if (!dir.create(tmpDir))
stop(gettextf("unable to create temporary directory %s",
sQuote(normalizePath(tmpDir, mustWork = FALSE))),
domain = NA, call. = FALSE)
cDir <- getwd()
on.exit(setwd(cDir))
on.exit(unlink(tmpDir, recursive = TRUE), add = TRUE)
res <- .zip.unpack(pkg, tmpDir)
Sys.sleep(sleepTime)
setwd(tmpDir)
res <- tools::checkMD5sums(pkgname, file.path(tmpDir, pkgname))
if (!quiet && !is.na(res) && res) {
cat(gettextf("package %s successfully unpacked and MD5 sums checked\n",
sQuote(pkgname)))
flush.console()
}
desc <- read.dcf(file.path(pkgname, "DESCRIPTION"), c("Package",
"Type"))
if (desc[1L, "Type"] %in% "Translation") {
fp <- file.path(pkgname, "share", "locale")
if (file.exists(fp)) {
langs <- dir(fp)
for (lang in langs) {
path0 <- file.path(fp, lang, "LC_MESSAGES")
mos <- dir(path0, full.names = TRUE)
path <- file.path(R.home("share"), "locale",
lang, "LC_MESSAGES")
if (!file.exists(path))
if (!dir.create(path, FALSE, TRUE))
warning(gettextf("failed to create %s", sQuote(path)),
domain = NA)
Sys.sleep(sleepTime)
res <- file.copy(mos, path, overwrite = TRUE)
Sys.sleep(sleepTime)
if (any(!res))
warning(gettextf("failed to create %s", paste(sQuote(mos[!res]),
collapse = ",")), domain = NA)
}
}
fp <- file.path(pkgname, "library")
if (file.exists(fp)) {
spkgs <- dir(fp)
for (spkg in spkgs) {
langs <- dir(file.path(fp, spkg, "po"))
for (lang in langs) {
path0 <- file.path(fp, spkg, "po", lang, "LC_MESSAGES")
mos <- dir(path0, full.names = TRUE)
path <- file.path(R.home(), "library", spkg,
"po", lang, "LC_MESSAGES")
if (!file.exists(path))
if (!dir.create(path, FALSE, TRUE))
warning(gettextf("failed to create %s",
sQuote(path)), domain = NA)
res <- file.copy(mos, path, overwrite = TRUE)
Sys.sleep(sleepTime)
if (any(!res))
warning(gettextf("failed to create %s", paste(sQuote(mos[!res]),
collapse = ",")), domain = NA)
}
}
}
}
else {
instPath <- file.path(lib, pkgname)
if (identical(lock, "pkglock") || isTRUE(lock)) {
lockdir <- if (identical(lock, "pkglock"))
file.path(lib, paste0("00LOCK-", pkgname))
else file.path(lib, "00LOCK")
if (file.exists(lockdir)) {
stop(gettextf("ERROR: failed to lock directory %s for modifying\nTry removing %s",
sQuote(lib), sQuote(lockdir)), domain = NA)
}
dir.create(lockdir, recursive = TRUE)
if (!dir.exists(lockdir))
stop(gettextf("ERROR: failed to create lock directory %s",
sQuote(lockdir)), domain = NA)
if (file.exists(instPath)) {
file.copy(instPath, lockdir, recursive = TRUE)
Sys.sleep(sleepTime)
on.exit({
if (restorePrevious) {
try(unlink(instPath, recursive = TRUE))
savedcopy <- file.path(lockdir, pkgname)
file.copy(savedcopy, lib, recursive = TRUE)
Sys.sleep(sleepTime)
warning(gettextf("restored %s", sQuote(pkgname)),
domain = NA, call. = FALSE, immediate. = TRUE)
}
}, add = TRUE)
restorePrevious <- FALSE
}
on.exit(unlink(lockdir, recursive = TRUE), add = TRUE)
}
if (libs_only) {
if (!file_test("-d", file.path(instPath, "libs")))
warning(gettextf("there is no 'libs' directory in package %s",
sQuote(pkgname)), domain = NA, call. = FALSE,
immediate. = TRUE)
for (sub in c("i386", "x64")) if (file_test("-d",
file.path(tmpDir, pkgname, "libs", sub))) {
unlink(file.path(instPath, "libs", sub), recursive = TRUE)
ret <- file.copy(file.path(tmpDir, pkgname, "libs",
sub), file.path(instPath, "libs"), recursive = TRUE)
Sys.sleep(sleepTime)
if (any(!ret)) {
warning(gettextf("unable to move temporary installation %s to %s",
sQuote(normalizePath(file.path(tmpDir, pkgname,
"libs", sub), mustWork = FALSE)), sQuote(normalizePath(file.path(instPath,
"libs"), mustWork = FALSE))), domain = NA,
call. = FALSE, immediate. = TRUE)
restorePrevious <- TRUE
}
}
fi <- file.info(Sys.glob(file.path(instPath, "libs",
"*")))
dirs <- row.names(fi[fi$isdir %in% TRUE])
if (length(dirs)) {
descfile <- file.path(instPath, "DESCRIPTION")
olddesc <- readLines(descfile)
olddesc <- grep("^Archs:", olddesc, invert = TRUE,
value = TRUE, useBytes = TRUE)
newdesc <- c(olddesc, paste("Archs:", paste(basename(dirs),
collapse = ", ")))
writeLines(newdesc, descfile, useBytes = TRUE)
}
}
else {
ret <- unlink(instPath, recursive = TRUE, force = TRUE)
if (ret == 0) {
Sys.sleep(0.5)
ret <- file.rename(file.path(tmpDir, pkgname),
instPath)
if (!ret) {
warning(gettextf("unable to move temporary installation %s to %s",
sQuote(normalizePath(file.path(tmpDir, pkgname),
mustWork = FALSE)), sQuote(normalizePath(instPath,
mustWork = FALSE))), domain = NA, call. = FALSE,
immediate. = TRUE)
restorePrevious <- TRUE
}
}
else {
warning(gettextf("cannot remove prior installation of package %s",
sQuote(pkgname)), domain = NA, call. = FALSE,
immediate. = TRUE)
restorePrevious <- TRUE
}
}
}
}
env <- loadNamespace("utils")
unlockBinding("unpackPkgZip", env)
assign("unpackPkgZip", unpackPkgZip, env)
install.packages("yaml")
install.packages("yaml")
#render your site.
rmarkdown::render_site()
install.packages("devtools")
#render your site.
rmarkdown::render_site()
